
test_space.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002264  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080023fc  080023fc  000123fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800240c  0800240c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800240c  0800240c  0001240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002414  08002414  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800241c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08002428  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002428  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007478  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001450  00000000  00000000  000274b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  00028908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  00028fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a8a  00000000  00000000  00029610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007b6f  00000000  00000000  0003f09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca5e  00000000  00000000  00046c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3667  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b04  00000000  00000000  000d36bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080023e4 	.word	0x080023e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080023e4 	.word	0x080023e4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fa8b 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f83f 	bl	800055c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f923 	bl	8000728 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004e2:	f000 f899 	bl	8000618 <MX_ADC1_Init>
  MX_SPI1_Init();
 80004e6:	f000 f8e9 	bl	80006bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t msg_arr[2] = {0};
 80004ea:	2300      	movs	r3, #0
 80004ec:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  HAL_ADC_Start(&hadc1);
 80004ee:	4817      	ldr	r0, [pc, #92]	; (800054c <main+0x7c>)
 80004f0:	f000 fb34 	bl	8000b5c <HAL_ADC_Start>
	  adcvalue = HAL_ADC_GetValue(&hadc1);
 80004f4:	4815      	ldr	r0, [pc, #84]	; (800054c <main+0x7c>)
 80004f6:	f000 fbe5 	bl	8000cc4 <HAL_ADC_GetValue>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a14      	ldr	r2, [pc, #80]	; (8000550 <main+0x80>)
 80004fe:	6013      	str	r3, [r2, #0]

	  // Saving 32bit ADC values into an array of 4 8bit int
	  for(int i = 0; i<2;i++){
 8000500:	2300      	movs	r3, #0
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	e00e      	b.n	8000524 <main+0x54>
		  msg_arr[i] = ((uint16_t*)&adcvalue)[i];
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <main+0x80>)
 800050c:	4413      	add	r3, r2
 800050e:	881a      	ldrh	r2, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	f107 0108 	add.w	r1, r7, #8
 8000518:	440b      	add	r3, r1
 800051a:	f823 2c08 	strh.w	r2, [r3, #-8]
	  for(int i = 0; i<2;i++){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3301      	adds	r3, #1
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b01      	cmp	r3, #1
 8000528:	dded      	ble.n	8000506 <main+0x36>
	  }

	  //1. Bring Slave Select LOW
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2110      	movs	r1, #16
 800052e:	4809      	ldr	r0, [pc, #36]	; (8000554 <main+0x84>)
 8000530:	f001 f86e 	bl	8001610 <HAL_GPIO_WritePin>

	  //2. Transmit register + data
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)&msg_arr[0], 2, 0xFF);
 8000534:	4639      	mov	r1, r7
 8000536:	23ff      	movs	r3, #255	; 0xff
 8000538:	2202      	movs	r2, #2
 800053a:	4807      	ldr	r0, [pc, #28]	; (8000558 <main+0x88>)
 800053c:	f001 fd1f 	bl	8001f7e <HAL_SPI_Transmit>

	  //3. Bring slave to select high
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2110      	movs	r1, #16
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <main+0x84>)
 8000546:	f001 f863 	bl	8001610 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 800054a:	e7d0      	b.n	80004ee <main+0x1e>
 800054c:	2000002c 	.word	0x2000002c
 8000550:	20000074 	.word	0x20000074
 8000554:	40021000 	.word	0x40021000
 8000558:	20000078 	.word	0x20000078

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	; 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f001 ff32 	bl	80023d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <SystemClock_Config+0xb4>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <SystemClock_Config+0xb4>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <SystemClock_Config+0xb4>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <SystemClock_Config+0xb8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <SystemClock_Config+0xb8>)
 80005a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <SystemClock_Config+0xb8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 f839 	bl	8001644 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005d8:	f000 f8ea 	bl	80007b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fa9c 	bl	8001b34 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000602:	f000 f8d5 	bl	80007b0 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	463b      	mov	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800062a:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_ADC1_Init+0x98>)
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <MX_ADC1_Init+0x9c>)
 800062e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_ADC1_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_ADC1_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <MX_ADC1_Init+0xa0>)
 800065a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000664:	2201      	movs	r2, #1
 8000666:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000672:	2201      	movs	r2, #1
 8000674:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000678:	f000 fa2c 	bl	8000ad4 <HAL_ADC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000682:	f000 f895 	bl	80007b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000686:	2302      	movs	r3, #2
 8000688:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <MX_ADC1_Init+0x98>)
 8000698:	f000 fb22 	bl	8000ce0 <HAL_ADC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006a2:	f000 f885 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000002c 	.word	0x2000002c
 80006b4:	40012000 	.word	0x40012000
 80006b8:	0f000001 	.word	0x0f000001

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2238      	movs	r2, #56	; 0x38
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f001 fbad 	bl	8001e6c <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f84a 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000078 	.word	0x20000078
 8000724:	40013000 	.word	0x40013000

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_GPIO_Init+0x80>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <MX_GPIO_Init+0x80>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_GPIO_Init+0x80>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_GPIO_Init+0x80>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <MX_GPIO_Init+0x80>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_GPIO_Init+0x80>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077c:	480b      	ldr	r0, [pc, #44]	; (80007ac <MX_GPIO_Init+0x84>)
 800077e:	f000 ff47 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_GPIO_Init+0x84>)
 800079c:	f000 fdb4 	bl	8001308 <HAL_GPIO_Init>

}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020800 	.word	0x40020800

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <Error_Handler+0x8>
	...

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <HAL_MspInit+0x4c>)
 80007cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d0:	6453      	str	r3, [r2, #68]	; 0x44
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <HAL_MspInit+0x4c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a17      	ldr	r2, [pc, #92]	; (8000888 <HAL_ADC_MspInit+0x7c>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d127      	bne.n	800087e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <HAL_ADC_MspInit+0x80>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	4a15      	ldr	r2, [pc, #84]	; (800088c <HAL_ADC_MspInit+0x80>)
 8000838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083c:	6453      	str	r3, [r2, #68]	; 0x44
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <HAL_ADC_MspInit+0x80>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_ADC_MspInit+0x80>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <HAL_ADC_MspInit+0x80>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_ADC_MspInit+0x80>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000866:	2304      	movs	r3, #4
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086a:	2303      	movs	r3, #3
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <HAL_ADC_MspInit+0x84>)
 800087a:	f000 fd45 	bl	8001308 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40012000 	.word	0x40012000
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000

08000894 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a19      	ldr	r2, [pc, #100]	; (8000918 <HAL_SPI_MspInit+0x84>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d12b      	bne.n	800090e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <HAL_SPI_MspInit+0x88>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a17      	ldr	r2, [pc, #92]	; (800091c <HAL_SPI_MspInit+0x88>)
 80008c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_SPI_MspInit+0x88>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_SPI_MspInit+0x88>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a10      	ldr	r2, [pc, #64]	; (800091c <HAL_SPI_MspInit+0x88>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_SPI_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008ee:	23f0      	movs	r3, #240	; 0xf0
 80008f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008fe:	2305      	movs	r3, #5
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <HAL_SPI_MspInit+0x8c>)
 800090a:	f000 fcfd 	bl	8001308 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40013000 	.word	0x40013000
 800091c:	40023800 	.word	0x40023800
 8000920:	40020000 	.word	0x40020000

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f890 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <SystemInit+0x20>)
 800097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <SystemInit+0x20>)
 8000984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800099c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009a2:	490e      	ldr	r1, [pc, #56]	; (80009dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009b8:	4c0b      	ldr	r4, [pc, #44]	; (80009e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009c6:	f7ff ffd7 	bl	8000978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ca:	f001 fcdf 	bl	800238c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ce:	f7ff fd7f 	bl	80004d0 <main>
  bx  lr    
 80009d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e0:	0800241c 	.word	0x0800241c
  ldr r2, =_sbss
 80009e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e8:	200000d8 	.word	0x200000d8

080009ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC_IRQHandler>
	...

080009f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <HAL_Init+0x40>)
 80009fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_Init+0x40>)
 8000a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_Init+0x40>)
 8000a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 fc41 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1e:	200f      	movs	r0, #15
 8000a20:	f000 f808 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a24:	f7ff feca 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023c00 	.word	0x40023c00

08000a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x54>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0x58>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4619      	mov	r1, r3
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fc4b 	bl	80012ee <HAL_SYSTICK_Config>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00e      	b.n	8000a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b0f      	cmp	r3, #15
 8000a66:	d80a      	bhi.n	8000a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f000 fc21 	bl	80012b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <HAL_InitTick+0x5c>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x20>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	200000d4 	.word	0x200000d4

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200000d4 	.word	0x200000d4

08000ad4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d101      	bne.n	8000aea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e033      	b.n	8000b52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d109      	bne.n	8000b06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff fe8a 	bl	800080c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2200      	movs	r2, #0
 8000b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 0310 	and.w	r3, r3, #16
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d118      	bne.n	8000b44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b1a:	f023 0302 	bic.w	r3, r3, #2
 8000b1e:	f043 0202 	orr.w	r2, r3, #2
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f000 fa0c 	bl	8000f44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f023 0303 	bic.w	r3, r3, #3
 8000b3a:	f043 0201 	orr.w	r2, r3, #1
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	641a      	str	r2, [r3, #64]	; 0x40
 8000b42:	e001      	b.n	8000b48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d101      	bne.n	8000b76 <HAL_ADC_Start+0x1a>
 8000b72:	2302      	movs	r3, #2
 8000b74:	e097      	b.n	8000ca6 <HAL_ADC_Start+0x14a>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d018      	beq.n	8000bbe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f042 0201 	orr.w	r2, r2, #1
 8000b9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b9c:	4b45      	ldr	r3, [pc, #276]	; (8000cb4 <HAL_ADC_Start+0x158>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a45      	ldr	r2, [pc, #276]	; (8000cb8 <HAL_ADC_Start+0x15c>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	0c9a      	lsrs	r2, r3, #18
 8000ba8:	4613      	mov	r3, r2
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4413      	add	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000bb0:	e002      	b.n	8000bb8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d1f9      	bne.n	8000bb2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d15f      	bne.n	8000c8c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bd4:	f023 0301 	bic.w	r3, r3, #1
 8000bd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d007      	beq.n	8000bfe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bf6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c0a:	d106      	bne.n	8000c1a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c10:	f023 0206 	bic.w	r2, r3, #6
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	645a      	str	r2, [r3, #68]	; 0x44
 8000c18:	e002      	b.n	8000c20 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <HAL_ADC_Start+0x160>)
 8000c2a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000c34:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 031f 	and.w	r3, r3, #31
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d10f      	bne.n	8000c62 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d129      	bne.n	8000ca4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	e020      	b.n	8000ca4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a16      	ldr	r2, [pc, #88]	; (8000cc0 <HAL_ADC_Start+0x164>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d11b      	bne.n	8000ca4 <HAL_ADC_Start+0x148>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d114      	bne.n	8000ca4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	e00b      	b.n	8000ca4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f043 0210 	orr.w	r2, r3, #16
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9c:	f043 0201 	orr.w	r2, r3, #1
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	431bde83 	.word	0x431bde83
 8000cbc:	40012300 	.word	0x40012300
 8000cc0:	40012000 	.word	0x40012000

08000cc4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d101      	bne.n	8000cfc <HAL_ADC_ConfigChannel+0x1c>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	e113      	b.n	8000f24 <HAL_ADC_ConfigChannel+0x244>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b09      	cmp	r3, #9
 8000d0a:	d925      	bls.n	8000d58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68d9      	ldr	r1, [r3, #12]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	3b1e      	subs	r3, #30
 8000d22:	2207      	movs	r2, #7
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43da      	mvns	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	400a      	ands	r2, r1
 8000d30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	68d9      	ldr	r1, [r3, #12]
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	4603      	mov	r3, r0
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4403      	add	r3, r0
 8000d4a:	3b1e      	subs	r3, #30
 8000d4c:	409a      	lsls	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	430a      	orrs	r2, r1
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	e022      	b.n	8000d9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6919      	ldr	r1, [r3, #16]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	4613      	mov	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	400a      	ands	r2, r1
 8000d7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6919      	ldr	r1, [r3, #16]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	4603      	mov	r3, r0
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4403      	add	r3, r0
 8000d94:	409a      	lsls	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d824      	bhi.n	8000df0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	4613      	mov	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	3b05      	subs	r3, #5
 8000db8:	221f      	movs	r2, #31
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	400a      	ands	r2, r1
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	3b05      	subs	r3, #5
 8000de2:	fa00 f203 	lsl.w	r2, r0, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	430a      	orrs	r2, r1
 8000dec:	635a      	str	r2, [r3, #52]	; 0x34
 8000dee:	e04c      	b.n	8000e8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b0c      	cmp	r3, #12
 8000df6:	d824      	bhi.n	8000e42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	3b23      	subs	r3, #35	; 0x23
 8000e0a:	221f      	movs	r2, #31
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43da      	mvns	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	400a      	ands	r2, r1
 8000e18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	3b23      	subs	r3, #35	; 0x23
 8000e34:	fa00 f203 	lsl.w	r2, r0, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e40:	e023      	b.n	8000e8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	3b41      	subs	r3, #65	; 0x41
 8000e54:	221f      	movs	r2, #31
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	400a      	ands	r2, r1
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	4618      	mov	r0, r3
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	3b41      	subs	r3, #65	; 0x41
 8000e7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	430a      	orrs	r2, r1
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e8a:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <HAL_ADC_ConfigChannel+0x250>)
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a28      	ldr	r2, [pc, #160]	; (8000f34 <HAL_ADC_ConfigChannel+0x254>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d10f      	bne.n	8000eb8 <HAL_ADC_ConfigChannel+0x1d8>
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b12      	cmp	r3, #18
 8000e9e:	d10b      	bne.n	8000eb8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <HAL_ADC_ConfigChannel+0x254>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d12b      	bne.n	8000f1a <HAL_ADC_ConfigChannel+0x23a>
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	; (8000f38 <HAL_ADC_ConfigChannel+0x258>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d003      	beq.n	8000ed4 <HAL_ADC_ConfigChannel+0x1f4>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b11      	cmp	r3, #17
 8000ed2:	d122      	bne.n	8000f1a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a11      	ldr	r2, [pc, #68]	; (8000f38 <HAL_ADC_ConfigChannel+0x258>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d111      	bne.n	8000f1a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_ADC_ConfigChannel+0x25c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <HAL_ADC_ConfigChannel+0x260>)
 8000efc:	fba2 2303 	umull	r2, r3, r2, r3
 8000f00:	0c9a      	lsrs	r2, r3, #18
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000f0c:	e002      	b.n	8000f14 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f9      	bne.n	8000f0e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40012300 	.word	0x40012300
 8000f34:	40012000 	.word	0x40012000
 8000f38:	10000012 	.word	0x10000012
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	431bde83 	.word	0x431bde83

08000f44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f4c:	4b79      	ldr	r3, [pc, #484]	; (8001134 <ADC_Init+0x1f0>)
 8000f4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	431a      	orrs	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6859      	ldr	r1, [r3, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	021a      	lsls	r2, r3, #8
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6859      	ldr	r1, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6899      	ldr	r1, [r3, #8]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd6:	4a58      	ldr	r2, [pc, #352]	; (8001138 <ADC_Init+0x1f4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d022      	beq.n	8001022 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6899      	ldr	r1, [r3, #8]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800100c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6899      	ldr	r1, [r3, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	e00f      	b.n	8001042 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001030:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001040:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0202 	bic.w	r2, r2, #2
 8001050:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6899      	ldr	r1, [r3, #8]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7e1b      	ldrb	r3, [r3, #24]
 800105c:	005a      	lsls	r2, r3, #1
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d01b      	beq.n	80010a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800107e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800108e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6859      	ldr	r1, [r3, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	3b01      	subs	r3, #1
 800109c:	035a      	lsls	r2, r3, #13
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	e007      	b.n	80010b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	051a      	lsls	r2, r3, #20
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6899      	ldr	r1, [r3, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010fa:	025a      	lsls	r2, r3, #9
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6899      	ldr	r1, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	029a      	lsls	r2, r3, #10
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	609a      	str	r2, [r3, #8]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	40012300 	.word	0x40012300
 8001138:	0f000001 	.word	0x0f000001

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800126c:	d301      	bcc.n	8001272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126e:	2301      	movs	r3, #1
 8001270:	e00f      	b.n	8001292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <SysTick_Config+0x40>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127a:	210f      	movs	r1, #15
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f7ff ff8e 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <SysTick_Config+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <SysTick_Config+0x40>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	e000e010 	.word	0xe000e010

080012a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff47 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff5c 	bl	8001184 <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff8e 	bl	80011f4 <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff5d 	bl	80011a0 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffb0 	bl	800125c <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	e159      	b.n	80015d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001324:	2201      	movs	r2, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	429a      	cmp	r2, r3
 800133e:	f040 8148 	bne.w	80015d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d005      	beq.n	800135a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001356:	2b02      	cmp	r3, #2
 8001358:	d130      	bne.n	80013bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001390:	2201      	movs	r2, #1
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	f003 0201 	and.w	r2, r3, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d017      	beq.n	80013f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d123      	bne.n	800144c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	08da      	lsrs	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3208      	adds	r2, #8
 800140c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	220f      	movs	r2, #15
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	08da      	lsrs	r2, r3, #3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3208      	adds	r2, #8
 8001446:	69b9      	ldr	r1, [r7, #24]
 8001448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0203 	and.w	r2, r3, #3
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80a2 	beq.w	80015d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b57      	ldr	r3, [pc, #348]	; (80015f0 <HAL_GPIO_Init+0x2e8>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a56      	ldr	r2, [pc, #344]	; (80015f0 <HAL_GPIO_Init+0x2e8>)
 8001498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b54      	ldr	r3, [pc, #336]	; (80015f0 <HAL_GPIO_Init+0x2e8>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014aa:	4a52      	ldr	r2, [pc, #328]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a49      	ldr	r2, [pc, #292]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0x202>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a48      	ldr	r2, [pc, #288]	; (80015fc <HAL_GPIO_Init+0x2f4>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0x1fe>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a47      	ldr	r2, [pc, #284]	; (8001600 <HAL_GPIO_Init+0x2f8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00d      	beq.n	8001502 <HAL_GPIO_Init+0x1fa>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a46      	ldr	r2, [pc, #280]	; (8001604 <HAL_GPIO_Init+0x2fc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x1f6>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a45      	ldr	r2, [pc, #276]	; (8001608 <HAL_GPIO_Init+0x300>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_GPIO_Init+0x1f2>
 80014f6:	2304      	movs	r3, #4
 80014f8:	e008      	b.n	800150c <HAL_GPIO_Init+0x204>
 80014fa:	2307      	movs	r3, #7
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x204>
 80014fe:	2303      	movs	r3, #3
 8001500:	e004      	b.n	800150c <HAL_GPIO_Init+0x204>
 8001502:	2302      	movs	r3, #2
 8001504:	e002      	b.n	800150c <HAL_GPIO_Init+0x204>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x204>
 800150a:	2300      	movs	r3, #0
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	f002 0203 	and.w	r2, r2, #3
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	4093      	lsls	r3, r2
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800151c:	4935      	ldr	r1, [pc, #212]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800152a:	4b38      	ldr	r3, [pc, #224]	; (800160c <HAL_GPIO_Init+0x304>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800154e:	4a2f      	ldr	r2, [pc, #188]	; (800160c <HAL_GPIO_Init+0x304>)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <HAL_GPIO_Init+0x304>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001578:	4a24      	ldr	r2, [pc, #144]	; (800160c <HAL_GPIO_Init+0x304>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_GPIO_Init+0x304>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015a2:	4a1a      	ldr	r2, [pc, #104]	; (800160c <HAL_GPIO_Init+0x304>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_GPIO_Init+0x304>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015cc:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_GPIO_Init+0x304>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b0f      	cmp	r3, #15
 80015dc:	f67f aea2 	bls.w	8001324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40013800 	.word	0x40013800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400
 8001600:	40020800 	.word	0x40020800
 8001604:	40020c00 	.word	0x40020c00
 8001608:	40021000 	.word	0x40021000
 800160c:	40013c00 	.word	0x40013c00

08001610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800162c:	e003      	b.n	8001636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	041a      	lsls	r2, r3, #16
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e264      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d075      	beq.n	800174e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001662:	4ba3      	ldr	r3, [pc, #652]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b04      	cmp	r3, #4
 800166c:	d00c      	beq.n	8001688 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166e:	4ba0      	ldr	r3, [pc, #640]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001676:	2b08      	cmp	r3, #8
 8001678:	d112      	bne.n	80016a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800167a:	4b9d      	ldr	r3, [pc, #628]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001686:	d10b      	bne.n	80016a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	4b99      	ldr	r3, [pc, #612]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d05b      	beq.n	800174c <HAL_RCC_OscConfig+0x108>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d157      	bne.n	800174c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e23f      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a8:	d106      	bne.n	80016b8 <HAL_RCC_OscConfig+0x74>
 80016aa:	4b91      	ldr	r3, [pc, #580]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a90      	ldr	r2, [pc, #576]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e01d      	b.n	80016f4 <HAL_RCC_OscConfig+0xb0>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x98>
 80016c2:	4b8b      	ldr	r3, [pc, #556]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a8a      	ldr	r2, [pc, #552]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a87      	ldr	r2, [pc, #540]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0xb0>
 80016dc:	4b84      	ldr	r3, [pc, #528]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a83      	ldr	r2, [pc, #524]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b81      	ldr	r3, [pc, #516]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a80      	ldr	r2, [pc, #512]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80016ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d013      	beq.n	8001724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff f9de 	bl	8000abc <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff f9da 	bl	8000abc <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e204      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b76      	ldr	r3, [pc, #472]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0xc0>
 8001722:	e014      	b.n	800174e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff f9ca 	bl	8000abc <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff f9c6 	bl	8000abc <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e1f0      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	4b6c      	ldr	r3, [pc, #432]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0xe8>
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d063      	beq.n	8001822 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800175a:	4b65      	ldr	r3, [pc, #404]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001766:	4b62      	ldr	r3, [pc, #392]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800176e:	2b08      	cmp	r3, #8
 8001770:	d11c      	bne.n	80017ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001772:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d116      	bne.n	80017ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177e:	4b5c      	ldr	r3, [pc, #368]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_RCC_OscConfig+0x152>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e1c4      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001796:	4b56      	ldr	r3, [pc, #344]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4952      	ldr	r1, [pc, #328]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	e03a      	b.n	8001822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b4:	4b4f      	ldr	r3, [pc, #316]	; (80018f4 <HAL_RCC_OscConfig+0x2b0>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff f97f 	bl	8000abc <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff f97b 	bl	8000abc <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1a5      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d4:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e0:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4940      	ldr	r1, [pc, #256]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
 80017f4:	e015      	b.n	8001822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f6:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <HAL_RCC_OscConfig+0x2b0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff f95e 	bl	8000abc <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001804:	f7ff f95a 	bl	8000abc <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e184      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001816:	4b36      	ldr	r3, [pc, #216]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d030      	beq.n	8001890 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d016      	beq.n	8001864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <HAL_RCC_OscConfig+0x2b4>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff f93e 	bl	8000abc <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001844:	f7ff f93a 	bl	8000abc <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e164      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x200>
 8001862:	e015      	b.n	8001890 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_RCC_OscConfig+0x2b4>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186a:	f7ff f927 	bl	8000abc <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001872:	f7ff f923 	bl	8000abc <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e14d      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 8001886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80a0 	beq.w	80019de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10f      	bne.n	80018ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ca:	2301      	movs	r3, #1
 80018cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_RCC_OscConfig+0x2b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d121      	bne.n	800191e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_RCC_OscConfig+0x2b8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a07      	ldr	r2, [pc, #28]	; (80018fc <HAL_RCC_OscConfig+0x2b8>)
 80018e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e6:	f7ff f8e9 	bl	8000abc <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	e011      	b.n	8001912 <HAL_RCC_OscConfig+0x2ce>
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	42470000 	.word	0x42470000
 80018f8:	42470e80 	.word	0x42470e80
 80018fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001900:	f7ff f8dc 	bl	8000abc <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e106      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001912:	4b85      	ldr	r3, [pc, #532]	; (8001b28 <HAL_RCC_OscConfig+0x4e4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d106      	bne.n	8001934 <HAL_RCC_OscConfig+0x2f0>
 8001926:	4b81      	ldr	r3, [pc, #516]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	4a80      	ldr	r2, [pc, #512]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6713      	str	r3, [r2, #112]	; 0x70
 8001932:	e01c      	b.n	800196e <HAL_RCC_OscConfig+0x32a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b05      	cmp	r3, #5
 800193a:	d10c      	bne.n	8001956 <HAL_RCC_OscConfig+0x312>
 800193c:	4b7b      	ldr	r3, [pc, #492]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001940:	4a7a      	ldr	r2, [pc, #488]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001942:	f043 0304 	orr.w	r3, r3, #4
 8001946:	6713      	str	r3, [r2, #112]	; 0x70
 8001948:	4b78      	ldr	r3, [pc, #480]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194c:	4a77      	ldr	r2, [pc, #476]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6713      	str	r3, [r2, #112]	; 0x70
 8001954:	e00b      	b.n	800196e <HAL_RCC_OscConfig+0x32a>
 8001956:	4b75      	ldr	r3, [pc, #468]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195a:	4a74      	ldr	r2, [pc, #464]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 800195c:	f023 0301 	bic.w	r3, r3, #1
 8001960:	6713      	str	r3, [r2, #112]	; 0x70
 8001962:	4b72      	ldr	r3, [pc, #456]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001966:	4a71      	ldr	r2, [pc, #452]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001968:	f023 0304 	bic.w	r3, r3, #4
 800196c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d015      	beq.n	80019a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001976:	f7ff f8a1 	bl	8000abc <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197c:	e00a      	b.n	8001994 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197e:	f7ff f89d 	bl	8000abc <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f241 3288 	movw	r2, #5000	; 0x1388
 800198c:	4293      	cmp	r3, r2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e0c5      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001994:	4b65      	ldr	r3, [pc, #404]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0ee      	beq.n	800197e <HAL_RCC_OscConfig+0x33a>
 80019a0:	e014      	b.n	80019cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a2:	f7ff f88b 	bl	8000abc <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019aa:	f7ff f887 	bl	8000abc <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e0af      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c0:	4b5a      	ldr	r3, [pc, #360]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1ee      	bne.n	80019aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d105      	bne.n	80019de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d2:	4b56      	ldr	r3, [pc, #344]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a55      	ldr	r2, [pc, #340]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 80019d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 809b 	beq.w	8001b1e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019e8:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d05c      	beq.n	8001aae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d141      	bne.n	8001a80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fc:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <HAL_RCC_OscConfig+0x4ec>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff f85b 	bl	8000abc <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7ff f857 	bl	8000abc <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e081      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1c:	4b43      	ldr	r3, [pc, #268]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f0      	bne.n	8001a0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69da      	ldr	r2, [r3, #28]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	019b      	lsls	r3, r3, #6
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	3b01      	subs	r3, #1
 8001a42:	041b      	lsls	r3, r3, #16
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	061b      	lsls	r3, r3, #24
 8001a4c:	4937      	ldr	r1, [pc, #220]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <HAL_RCC_OscConfig+0x4ec>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff f830 	bl	8000abc <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff f82c 	bl	8000abc <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e056      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x41c>
 8001a7e:	e04e      	b.n	8001b1e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a80:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <HAL_RCC_OscConfig+0x4ec>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff f819 	bl	8000abc <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff f815 	bl	8000abc <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e03f      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa0:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x44a>
 8001aac:	e037      	b.n	8001b1e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e032      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <HAL_RCC_OscConfig+0x4e8>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d028      	beq.n	8001b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d121      	bne.n	8001b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d11a      	bne.n	8001b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aea:	4013      	ands	r3, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001af0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d111      	bne.n	8001b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	3b01      	subs	r3, #1
 8001b04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	42470060 	.word	0x42470060

08001b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0cc      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d90c      	bls.n	8001b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b65      	ldr	r3, [pc, #404]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b63      	ldr	r3, [pc, #396]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0b8      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b88:	4b59      	ldr	r3, [pc, #356]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4a52      	ldr	r2, [pc, #328]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bac:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	494d      	ldr	r1, [pc, #308]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d044      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d119      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e07f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d003      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf2:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e06f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c02:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e067      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f023 0203 	bic.w	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4934      	ldr	r1, [pc, #208]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c24:	f7fe ff4a 	bl	8000abc <HAL_GetTick>
 8001c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2c:	f7fe ff46 	bl	8000abc <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e04f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 020c 	and.w	r2, r3, #12
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1eb      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d20c      	bcs.n	8001c7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e032      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c88:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4916      	ldr	r1, [pc, #88]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d009      	beq.n	8001cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cba:	f000 f821 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	490a      	ldr	r1, [pc, #40]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	5ccb      	ldrb	r3, [r1, r3]
 8001cce:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_RCC_ClockConfig+0x1c8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe feaa 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023c00 	.word	0x40023c00
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	080023fc 	.word	0x080023fc
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	b5b0      	push	{r4, r5, r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d06:	2100      	movs	r1, #0
 8001d08:	6079      	str	r1, [r7, #4]
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	60f9      	str	r1, [r7, #12]
 8001d0e:	2100      	movs	r1, #0
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d12:	2100      	movs	r1, #0
 8001d14:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d16:	4952      	ldr	r1, [pc, #328]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d18:	6889      	ldr	r1, [r1, #8]
 8001d1a:	f001 010c 	and.w	r1, r1, #12
 8001d1e:	2908      	cmp	r1, #8
 8001d20:	d00d      	beq.n	8001d3e <HAL_RCC_GetSysClockFreq+0x3e>
 8001d22:	2908      	cmp	r1, #8
 8001d24:	f200 8094 	bhi.w	8001e50 <HAL_RCC_GetSysClockFreq+0x150>
 8001d28:	2900      	cmp	r1, #0
 8001d2a:	d002      	beq.n	8001d32 <HAL_RCC_GetSysClockFreq+0x32>
 8001d2c:	2904      	cmp	r1, #4
 8001d2e:	d003      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x38>
 8001d30:	e08e      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d32:	4b4c      	ldr	r3, [pc, #304]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x164>)
 8001d34:	60bb      	str	r3, [r7, #8]
       break;
 8001d36:	e08e      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d38:	4b4b      	ldr	r3, [pc, #300]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d3a:	60bb      	str	r3, [r7, #8]
      break;
 8001d3c:	e08b      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d3e:	4948      	ldr	r1, [pc, #288]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d40:	6849      	ldr	r1, [r1, #4]
 8001d42:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001d46:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d48:	4945      	ldr	r1, [pc, #276]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d4a:	6849      	ldr	r1, [r1, #4]
 8001d4c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001d50:	2900      	cmp	r1, #0
 8001d52:	d024      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d54:	4942      	ldr	r1, [pc, #264]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d56:	6849      	ldr	r1, [r1, #4]
 8001d58:	0989      	lsrs	r1, r1, #6
 8001d5a:	4608      	mov	r0, r1
 8001d5c:	f04f 0100 	mov.w	r1, #0
 8001d60:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001d64:	f04f 0500 	mov.w	r5, #0
 8001d68:	ea00 0204 	and.w	r2, r0, r4
 8001d6c:	ea01 0305 	and.w	r3, r1, r5
 8001d70:	493d      	ldr	r1, [pc, #244]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d72:	fb01 f003 	mul.w	r0, r1, r3
 8001d76:	2100      	movs	r1, #0
 8001d78:	fb01 f102 	mul.w	r1, r1, r2
 8001d7c:	1844      	adds	r4, r0, r1
 8001d7e:	493a      	ldr	r1, [pc, #232]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d80:	fba2 0101 	umull	r0, r1, r2, r1
 8001d84:	1863      	adds	r3, r4, r1
 8001d86:	4619      	mov	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	f7fe fa22 	bl	80001d8 <__aeabi_uldivmod>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4613      	mov	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e04a      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	099b      	lsrs	r3, r3, #6
 8001da4:	461a      	mov	r2, r3
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dae:	f04f 0100 	mov.w	r1, #0
 8001db2:	ea02 0400 	and.w	r4, r2, r0
 8001db6:	ea03 0501 	and.w	r5, r3, r1
 8001dba:	4620      	mov	r0, r4
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	014b      	lsls	r3, r1, #5
 8001dc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dcc:	0142      	lsls	r2, r0, #5
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	1b00      	subs	r0, r0, r4
 8001dd4:	eb61 0105 	sbc.w	r1, r1, r5
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	018b      	lsls	r3, r1, #6
 8001de2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001de6:	0182      	lsls	r2, r0, #6
 8001de8:	1a12      	subs	r2, r2, r0
 8001dea:	eb63 0301 	sbc.w	r3, r3, r1
 8001dee:	f04f 0000 	mov.w	r0, #0
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	00d9      	lsls	r1, r3, #3
 8001df8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dfc:	00d0      	lsls	r0, r2, #3
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	1912      	adds	r2, r2, r4
 8001e04:	eb45 0303 	adc.w	r3, r5, r3
 8001e08:	f04f 0000 	mov.w	r0, #0
 8001e0c:	f04f 0100 	mov.w	r1, #0
 8001e10:	0299      	lsls	r1, r3, #10
 8001e12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e16:	0290      	lsls	r0, r2, #10
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	461a      	mov	r2, r3
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	f7fe f9d6 	bl	80001d8 <__aeabi_uldivmod>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4613      	mov	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	60bb      	str	r3, [r7, #8]
      break;
 8001e4e:	e002      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e52:	60bb      	str	r3, [r7, #8]
      break;
 8001e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e56:	68bb      	ldr	r3, [r7, #8]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	00f42400 	.word	0x00f42400
 8001e68:	017d7840 	.word	0x017d7840

08001e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e07b      	b.n	8001f76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d108      	bne.n	8001e98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e8e:	d009      	beq.n	8001ea4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
 8001e96:	e005      	b.n	8001ea4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fce8 	bl	8000894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f28:	ea42 0103 	orr.w	r1, r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	f003 0104 	and.w	r1, r3, #4
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f003 0210 	and.w	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	69da      	ldr	r2, [r3, #28]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b088      	sub	sp, #32
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_SPI_Transmit+0x22>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e126      	b.n	80021ee <HAL_SPI_Transmit+0x270>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fa8:	f7fe fd88 	bl	8000abc <HAL_GetTick>
 8001fac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d002      	beq.n	8001fc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fc2:	e10b      	b.n	80021dc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_SPI_Transmit+0x52>
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d102      	bne.n	8001fd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fd4:	e102      	b.n	80021dc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2203      	movs	r2, #3
 8001fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	88fa      	ldrh	r2, [r7, #6]
 8001fee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	88fa      	ldrh	r2, [r7, #6]
 8001ff4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800201c:	d10f      	bne.n	800203e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800202c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800203c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b40      	cmp	r3, #64	; 0x40
 800204a:	d007      	beq.n	800205c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800205a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002064:	d14b      	bne.n	80020fe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_SPI_Transmit+0xf6>
 800206e:	8afb      	ldrh	r3, [r7, #22]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d13e      	bne.n	80020f2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	881a      	ldrh	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	1c9a      	adds	r2, r3, #2
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002098:	e02b      	b.n	80020f2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d112      	bne.n	80020ce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	881a      	ldrh	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	1c9a      	adds	r2, r3, #2
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80020cc:	e011      	b.n	80020f2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020ce:	f7fe fcf5 	bl	8000abc <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d803      	bhi.n	80020e6 <HAL_SPI_Transmit+0x168>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d102      	bne.n	80020ec <HAL_SPI_Transmit+0x16e>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020f0:	e074      	b.n	80021dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1ce      	bne.n	800209a <HAL_SPI_Transmit+0x11c>
 80020fc:	e04c      	b.n	8002198 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_SPI_Transmit+0x18e>
 8002106:	8afb      	ldrh	r3, [r7, #22]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d140      	bne.n	800218e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	330c      	adds	r3, #12
 8002116:	7812      	ldrb	r2, [r2, #0]
 8002118:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002132:	e02c      	b.n	800218e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b02      	cmp	r3, #2
 8002140:	d113      	bne.n	800216a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	330c      	adds	r3, #12
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	86da      	strh	r2, [r3, #54]	; 0x36
 8002168:	e011      	b.n	800218e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800216a:	f7fe fca7 	bl	8000abc <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d803      	bhi.n	8002182 <HAL_SPI_Transmit+0x204>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002180:	d102      	bne.n	8002188 <HAL_SPI_Transmit+0x20a>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800218c:	e026      	b.n	80021dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002192:	b29b      	uxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1cd      	bne.n	8002134 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	6839      	ldr	r1, [r7, #0]
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f8b3 	bl	8002308 <SPI_EndRxTxTransaction>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10a      	bne.n	80021cc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	77fb      	strb	r3, [r7, #31]
 80021d8:	e000      	b.n	80021dc <HAL_SPI_Transmit+0x25e>
  }

error:
 80021da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002208:	f7fe fc58 	bl	8000abc <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	4413      	add	r3, r2
 8002216:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002218:	f7fe fc50 	bl	8000abc <HAL_GetTick>
 800221c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	015b      	lsls	r3, r3, #5
 8002224:	0d1b      	lsrs	r3, r3, #20
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800222e:	e054      	b.n	80022da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002236:	d050      	beq.n	80022da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002238:	f7fe fc40 	bl	8000abc <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	429a      	cmp	r2, r3
 8002246:	d902      	bls.n	800224e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d13d      	bne.n	80022ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800225c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002266:	d111      	bne.n	800228c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002270:	d004      	beq.n	800227c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227a:	d107      	bne.n	800228c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800228a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002294:	d10f      	bne.n	80022b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e017      	b.n	80022fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	4013      	ands	r3, r2
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	bf0c      	ite	eq
 80022ea:	2301      	moveq	r3, #1
 80022ec:	2300      	movne	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d19b      	bne.n	8002230 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000000 	.word	0x20000000

08002308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <SPI_EndRxTxTransaction+0x7c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1b      	ldr	r2, [pc, #108]	; (8002388 <SPI_EndRxTxTransaction+0x80>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0d5b      	lsrs	r3, r3, #21
 8002320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002324:	fb02 f303 	mul.w	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002332:	d112      	bne.n	800235a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2200      	movs	r2, #0
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f7ff ff5a 	bl	80021f8 <SPI_WaitFlagStateUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d016      	beq.n	8002378 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f043 0220 	orr.w	r2, r3, #32
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e00f      	b.n	800237a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3b01      	subs	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002370:	2b80      	cmp	r3, #128	; 0x80
 8002372:	d0f2      	beq.n	800235a <SPI_EndRxTxTransaction+0x52>
 8002374:	e000      	b.n	8002378 <SPI_EndRxTxTransaction+0x70>
        break;
 8002376:	bf00      	nop
  }

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000000 	.word	0x20000000
 8002388:	165e9f81 	.word	0x165e9f81

0800238c <__libc_init_array>:
 800238c:	b570      	push	{r4, r5, r6, lr}
 800238e:	4d0d      	ldr	r5, [pc, #52]	; (80023c4 <__libc_init_array+0x38>)
 8002390:	4c0d      	ldr	r4, [pc, #52]	; (80023c8 <__libc_init_array+0x3c>)
 8002392:	1b64      	subs	r4, r4, r5
 8002394:	10a4      	asrs	r4, r4, #2
 8002396:	2600      	movs	r6, #0
 8002398:	42a6      	cmp	r6, r4
 800239a:	d109      	bne.n	80023b0 <__libc_init_array+0x24>
 800239c:	4d0b      	ldr	r5, [pc, #44]	; (80023cc <__libc_init_array+0x40>)
 800239e:	4c0c      	ldr	r4, [pc, #48]	; (80023d0 <__libc_init_array+0x44>)
 80023a0:	f000 f820 	bl	80023e4 <_init>
 80023a4:	1b64      	subs	r4, r4, r5
 80023a6:	10a4      	asrs	r4, r4, #2
 80023a8:	2600      	movs	r6, #0
 80023aa:	42a6      	cmp	r6, r4
 80023ac:	d105      	bne.n	80023ba <__libc_init_array+0x2e>
 80023ae:	bd70      	pop	{r4, r5, r6, pc}
 80023b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b4:	4798      	blx	r3
 80023b6:	3601      	adds	r6, #1
 80023b8:	e7ee      	b.n	8002398 <__libc_init_array+0xc>
 80023ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80023be:	4798      	blx	r3
 80023c0:	3601      	adds	r6, #1
 80023c2:	e7f2      	b.n	80023aa <__libc_init_array+0x1e>
 80023c4:	08002414 	.word	0x08002414
 80023c8:	08002414 	.word	0x08002414
 80023cc:	08002414 	.word	0x08002414
 80023d0:	08002418 	.word	0x08002418

080023d4 <memset>:
 80023d4:	4402      	add	r2, r0
 80023d6:	4603      	mov	r3, r0
 80023d8:	4293      	cmp	r3, r2
 80023da:	d100      	bne.n	80023de <memset+0xa>
 80023dc:	4770      	bx	lr
 80023de:	f803 1b01 	strb.w	r1, [r3], #1
 80023e2:	e7f9      	b.n	80023d8 <memset+0x4>

080023e4 <_init>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	bf00      	nop
 80023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ea:	bc08      	pop	{r3}
 80023ec:	469e      	mov	lr, r3
 80023ee:	4770      	bx	lr

080023f0 <_fini>:
 80023f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f2:	bf00      	nop
 80023f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023f6:	bc08      	pop	{r3}
 80023f8:	469e      	mov	lr, r3
 80023fa:	4770      	bx	lr
